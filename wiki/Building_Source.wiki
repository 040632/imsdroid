#summary Building IMSDroid
#labels Phase-Implementation

== Building Java Code ==
To build the java code you only need Eclipse and Android SDK. 

== Building Native libraries ==
IMSDroid contains only one native library (*tinyWRAP.so*) written in C++ as a wrapper for [http://www.doubango.org/ doubango] project. The JNI files are generated using [http://www.swig.org/ SWIG].<br />
To build *tinyWRAP* you have to build all doubango's libraries (ANSI-C).<br /> 
*tinyWRAP* depends on:
 * *tinySAK* (Swiss Army Knife): Utilities functions (SHA-1, MD5, HMAC, String, List, Timers, Thread, Mutex, Semaphore, ...)
 * *tinyNET*: Networking (DNS, DHCPv4/v6, STUN, TURN, ICE, ENUM, Sockets, ...)
 * *tinyHTTP*: HTTP stack (CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE, ...)
 * *tinyXCAP*: XCAP stack (AUID manager, URL generator) without XML parser (See Java code for parsers)
 * *tinyIPSec*: IPSec SA manager. Useless for Android but you MUST have it
 * *tinySMS*: SMS over IP (SM-TL, SM-RL) for IMS/LTE networks
 * *tinySIGCOMP:* Signaling Compression
 * *tinySDP*: SDP protocol
 * *tinyRTP*: RTP/RTCP protocols
 * *tinyMSRP*: MSRP protocol (Chat and File Transfer)
 * *tinyMEDIA*: Media plugins manager (Audio, video, Codecs, sessions, MSRP, QoS, ...)
 * *tinyDAV*(Doubango Audio Video): Media plugins implementation
 * *tinySIP*: SIP/IMS stack

The project also depends on FFmpeg, x264, opencore-amr, libogg, libvorbis, libtheora, iLBC, Speex, ... but you don't need to rebuild these libraries as they are already part of doubango (*$(DOUBANGO_HOME)/thirdparties/android/lib*).

=== Checkout doubango ===
{{{
svn checkout http://doubango.googlecode.com/svn/trunk/ doubango-read-only
}}}

=== Adjusting *root.mk* ===
 # goto *$(DOUBANGO_HOME)/android-projects* and open *root.mk* with your preferred text editor
 # Change *$ANDROID_NDK_ROOT* variable to point to the NDK root directory (e.g. */cygdrive/c/android-ndk*)
 # Change *$ANDROID_SDK_ROOT* variable to point to the SDK root directory (e.g. */cygdrive/c/android-sdk*). This step is not required if you don't wish to use *adb* utility.
 # Change *$ANDROID_PLATFORM* variable to point to your preferred platform root directory (e.g. *$(ANDROID_NDK_ROOT)/build/platforms/android-1.5*)
 # Set *$ANDROID_GCC_VER* variable with your GCC version (e.g. *4.2.1*)
 # Open new Console window
 # Add the toolchain root binary directory to the system *$PATH* if not already done:
{{{ 
export PATH=$ANDROID_NDK_ROOT\build\prebuilt\$(HOST)\arm-eabi-4.2.1\bin:$PATH
}}} 
 where *$HOST* is equal to *darwin-x86* on MAC OS X, *windows* on Windows XP/Vista/7 and *linux-x86* on Unix-like systems. We assume that *$(ANDROID_GCC_VER)* is equal to *4.2.1*.<br />
 # Set your custom *$(CFLAGS)* flags to change the default behavior. Example:
{{{
export CFLAGS="-g3 –O0 –DDEBUG_LEVEL=DEBUG_LEVEL_INFO"
}}}
You can off course set any valid GCC *$(CFLAGS)* flags.

=== Building libtinyWRAP.so ===
 # Go to the android-projects root directory:
{{{
cd $(DOUBANGO_HOME)/android-projects
}}}
 # Build all projects:
{{{
../bindings/java/android/buildAll.sh
}}}
The binaries will be generated under *$(DOUBANGO_HOME)/android-projects/output*.